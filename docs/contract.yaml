openapi: 3.0.3
info:
  title: Configmonkey - API Reference
  version: 0.0.1
  description: >
    # Overview

    Configmonkey's data architecture is structured in three main entities/resources: `Applications`, `Environments` and 
    `Configurations`, the first two describing the context where each individual set of configuration values lives, The
    hierarchy follows the scheme: `Application > Environment > Configuration`. Therefore, creating or accessing `Configurations`
    assumes knowledge of an `Application` and `Environment` which were previously setup.

    ## Applications

    As the name suggests, we recommend that users match this resource with the program they're adding to Configmokey. `Applications`
    are the root level container and they can have multiple `Environments`.

    ## Environments

    We recommend mirroring the number of environments 1:1, with each individual deployment of the application (e.g. Production,
    Staging, Development), however  the API doesn't enforce it since it knows nothing about the semantics of `Environments`, 
    except that there can be more than one and they can have only one `Application`.

    ## Configurations

    The leaf node of the configuration hierarchy. Each `Configuration` belongs to one `Environment`, and there can be only one 
    per `Environment`. `Configurations` are hierarchical and support multiple variables and groups of variables, structured in a tree
    data structure pretty much like a JSON file.

tags:
  - name: Applications
    description: CRUD over aplications
  - name: Environments
    description: CRUD over environments
  - name: Configurations
    description: CRUD over configurations
paths:
  /v1/apps:
    get:
      tags:
        - Applications
      summary: Get applications
      description: Returns a paginated list containing available applications. Navigation can be done by adjusting the limit and offset parameters
      operationId: getApplications
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
      responses:
        "200 Ok":
          description: Applications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Application"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
              examples:
                "Page with applications":
                  value:
                    data:
                      - name: Configmonkey
                        slug: configmonkey
                        created_at: "2023-08-13T00:00:00Z"
                        updated_at: "2023-08-13T00:00:00Z"
                      - name: Foo
                        slug: foo
                        created_at: "2023-08-13T00:00:00Z"
                        updated_at: "2023-08-13T00:00:00Z"
                    pagination:
                      count: 2
                      offset: 2
                      limit: 2
                      next: /v1/apps?limit=2&offset=2
                      prev: /v1/apps?limit=2&offset=0
                "Empty Page":
                  value:
                    data: []
                    pagination:
                      count: 0
                      offset: 0
                    limit: 10
    post:
      tags:
        - Applications
      summary: Create application
      description: Creates a new application. The slug must be unique (to be used in URI paths for navigation) and both the name and the slug must match their respective regular expressions specified below
      operationId: createApplication
      requestBody:
        description: Create a new application
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApplication"
            examples:
              "Create application":
                name: Configmonkey
                slug: configmonkey
        required: true
      responses:
        "201 Created":
          description: Application created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
              example:
                value:
                  name: Configmonkey
                  slug: configmonkey
                  created_at: "2023-08-13T00:00:00Z"
                  updated_at: "2023-08-13T00:00:00Z"
        "400 Bad request":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                "Invalid Name":
                  value:
                    code: invalid_name
                    message: The name contains invalid characters. Only letters, numbers, spaces and underscore (_) are allowed
                "Invalid Slug":
                  value:
                    code: invalid_slug
                    message: The slug contains invalid characters. Only lowercase letters, numbers and dash (-) are allowed
        "409 Conflict":
          description: Application already exists (Duplicate slug)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                value:
                  code: duplicate_slug
                  message: An app with the same slug already exists
  /v1/apps/{app_slug}:
    parameters:
      - $ref: "#/components/parameters/ApplicationSlug"

    delete:
      tags:
        - Applications
      summary: Delete application
      description: Deletes an existing application. The app must not have any created environment, otherwise it will fail
      operationId: deleteApplication
      responses:
        "204 No content":
          description: Application deleted successfully
        "422 Unprocessable content":
          description: Unable to delete application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                "Application not empty":
                  value:
                    code: app_has_envs
                    message: The environment could not be deleted because there are existing configs
  /v1/envs/{app_slug}:
    parameters:
      - $ref: "#/components/parameters/ApplicationSlug"

    get:
      tags:
        - Environments
      summary: List available environments
      description: List available environments
      operationId: getEnvironments
      responses:
        "200":
          description: Environments retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
    post:
      tags:
        - Environments
      summary: Create a new environment
      description: Create a new environment
      operationId: createEnvironments
      requestBody:
        description: Create a new environment
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEnvironment"
        required: true
      responses:
        "201":
          description: Environment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
  /v1/envs/{app_slug}/{env_slug}:
    parameters:
      - $ref: "#/components/parameters/ApplicationSlug"
      - $ref: "#/components/parameters/EnvironmentSlug"

    delete:
      tags:
        - Environments
      summary: Delete existing environment
      description: Delete existing environment
      operationId: deleteEnvironment
      responses:
        "204":
          description: Environment Deleted Successfully
      parameters:
        - $ref: "#/components/parameters/ApplicationSlug"
  /v1/configs/{app_slug}/{env_slug}:
    parameters:
      - $ref: "#/components/parameters/ApplicationSlug"
      - $ref: "#/components/parameters/EnvironmentSlug"
    get:
      tags:
        - Configurations
      summary: Get environment configuration properties
      description: Get environment configuration properties
      operationId: getConfigurations
      responses:
        "200":
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Configuration"
    post:
      tags:
        - Configurations
      summary: Create a new configuration
      description: Create a new configuration
      operationId: createConfiguration
      requestBody:
        description: Create a new configuration
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateConfiguration"
        required: true
      responses:
        "201":
          description: Configuration created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Configuration"
    delete:
      tags:
        - Configurations
      summary: Delete existing configuration
      description: Delete existing configuration
      operationId: deleteConfiguration
      responses:
        "204":
          description: Configuration Deleted Successfully
components:
  parameters:
    ApplicationSlug:
      name: app_slug
      in: path
      required: true
      description: The application's slug
      schema:
        $ref: "#/components/schemas/Slug"
    EnvironmentSlug:
      name: env_slug
      in: path
      required: true
      description: The environment's slug
      schema:
        $ref: "#/components/schemas/Slig"
    Offset:
      name: offset
      in: query
      required: false
      description: Maximum entries to skip
      schema:
        $ref: "#/components/schemas/Offset"
    Limit:
      name: limit
      in: query
      required: false
      description: Maximum entries to request
      schema:
        $ref: "#/components/schemas/Limit"
  schemas:
    Name:
      type: string
      pattern: '^\w+(\s+\w+)*$'
      description: The name of a given resource. Only supports word characters and whitespaces
      examples:
        - Configmonkey
        - Config Monkey
        - Configmonkey01
    Slug:
      type: string
      pattern: '^[a-z0-9\-]+$'
      description: The slug (URI) of a given resource. Only supports lowercase alphanumeric characters and dashes (`-`)
      examples:
        - configmonkey
        - config-monkey
        - configmonkey01
    Date:
      type: string
      format: date-time
      description: Dates are represented in the UTC timezone using the ISO 8601 format
      example: 2023-08-13T00:00:00Z
    Limit:
      type: integer
      format: int32
      description: Maximum entries requested or to request
      example: 5
    Offset:
      type: integer
      format: int32
      description: Number of entries skipped or to skip
      example: 5
    Pagination:
      type: object
      description: Contains information on the current position and how to navigate a list
      properties:
        count:
          type: integer
          format: int32
          description: Total entries returned
          example: 5
        offset:
          allOf:
            - $ref: "#/components/schemas/Offset"
          description: Maximum entries skipped
        limit:
          allOf:
            - $ref: "#/components/schemas/Limit"
          description: Maximum entries requested
        next:
          type: string
          description: URI path to the next page
          example: "/v1/apps?limit=5&offset=10"
        prev:
          type: string
          description: URI path to the previous page
          example: "/v1/apps?limit=15&offset=0"
    Error:
      type: object
      description: An error representation returned by API calls that don't succeed
      properties:
        code:
          type: string
          description: A short code representing the error (To be used for automated error handling)
        message:
          type: string
          description: A human readable message describing the error details
    ConfigurationValue:
      type: string
      format: json
      example:
        key1: value1
        key2: value2
    CreateApplication:
      type: object
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/Name"
          description: The application's name
        slug:
          allOf:
            - $ref: "#/components/schemas/Slug"
          description: The environment's unique slug
    Application:
      type: object
      description: Represents an application that can be deployed to multiple environments, each with its own configuration.
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/Name"
          description: The application's name
        slug:
          allOf:
            - $ref: "#/components/schemas/Slug"
          description: The environment's unique slug
        created_at:
          allOf:
            - $ref: "#/components/schemas/Date"
          description: Date when the application was created
        updated_at:
          allOf:
            - $ref: "#/components/schemas/Date"
          description: Date when the application was last updated
    CreateEnvironment:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/EnvironmentName"
        slug:
          $ref: "#/components/schemas/EnvironmentSlug"
    Environment:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/EnvironmentName"
        slug:
          $ref: "#/components/schemas/EnvironmentSlug"
        created_at:
          allOf:
            - $ref: "#/components/schemas/Date"
          description: Date when the environment was created
        updated_at:
          allOf:
            - $ref: "#/components/schemas/Date"
          description: Date when the environment was last updated
    CreateConfiguration:
      $ref: "#/components/schemas/ConfigurationValue"
    Configuration:
      type: object
      properties:
        config:
          $ref: "#/components/schemas/ConfigurationValue"
        created_at:
          allOf:
            - $ref: "#/components/schemas/Date"
          description: Date when the configuration was created
        updated_at:
          allOf:
            - $ref: "#/components/schemas/Date"
          description: Date when the configuration was last updated
